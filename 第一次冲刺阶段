package com.seventh.db;

public class Account {
	private int id;
	private String name;
	private String time;
	private float money;
	private String type;
	private boolean earnings;
	private String remark;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getTime() {
		return time;
	}
	public void setTime(String time) {
		this.time = time;
	}
	public float getMoney() {
		return money;
	}
	public void setMoney(float money) {
		this.money = money;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public boolean isEarnings() {
		return earnings;
	}
	public void setEarnings(boolean earnings) {
		this.earnings = earnings;
	}
	public String getRemark() {
		return remark;
	}
	public void setRemark(String remark) {
		this.remark = remark;
	}

}


package com.seventh.db;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;


public class AccountDBdao {
	private Context context;
	MyDBOpenHelper dbOpenHelper;

	public AccountDBdao(Context context) {
		this.context = context;
		dbOpenHelper = new MyDBOpenHelper(context);
	}

	/**
	 * 添加一条记录
	 */
	public void add(String time, float money, String type, boolean earnings,
			String remark, String name) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			// db.execSQL("insert into account (time,money,type,earnings,remark,name) values (?,?,?,?,?,?)",new
			// Object[]{time,money,type,earnings,remark,name});
			ContentValues values = new ContentValues();
			values.put("time", time);// 交易时间
			values.put("money", money);// 金钱
			values.put("type", type);// 类型
			values.put("earnings", earnings);// 是否收益
			values.put("remark", remark);// 备注
			values.put("name", name);// 用户名
			db.insert("account", null, values); // 组拼sql语句完成的添加的操作
			db.close();
		}

	}

	/**
	 * 删除一条记录
	 */
	public void delete(String accountid) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			db.delete("account", "accountid=?", new String[] { accountid });
			db.close();
		}
	}

	/**
	 * 数据库的更改操作
	 */
	public void update(String accountid, String time, float money, String type,
			boolean earnings, String remark) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			ContentValues values = new ContentValues();
			values.put("time", time);// 交易时间
			values.put("money", money);// 金钱
			values.put("type", type);// 类型
			values.put("earnings", earnings);// 是否收益
			values.put("remark", remark);// 备注
			db.update("account", values, "accountid=?",
					new String[] { accountid });
			db.close();
		}
	}

	/**
	 * 数据库的查询操作 判断有无该数据
	 */
	public boolean find(String name) {
		boolean result = false;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			// select * from person
			Cursor cursor = db.query("account", null, "name=?",
					new String[] { name }, null, null, null);
			if (cursor.moveToFirst()) {
				result = true;
			}
			cursor.close();
			db.close();
		}
		return result;

	}

	/**
	 * 查询所有信息
	 */
	public List<Account> findAll() {
		List<Account> accounts = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.query("account", null, null, null, null, null,
					null);
			accounts = new ArrayList<Account>();
			while (cursor.moveToNext()) {
				Account account = new Account();
				int id = cursor.getInt(cursor.getColumnIndex("accountid"));
				account.setId(id);
				String name = cursor.getString(cursor.getColumnIndex("name"));
				account.setName(name);
				float money = Float.parseFloat(cursor.getString(cursor
						.getColumnIndex("money")));
				account.setMoney(money);
				String time = cursor.getString(cursor.getColumnIndex("time"));
				account.setTime(time);
				String type = cursor.getString(cursor.getColumnIndex("type"));
				account.setType(type);
				long earnings = cursor.getLong(cursor
						.getColumnIndex("earnings"));
				if (earnings == 0) {
					account.setEarnings(false);
				} else {
					account.setEarnings(true);
				}
				String remark = cursor.getString(cursor
						.getColumnIndex("remark"));
				account.setRemark(remark);
				accounts.add(account);
			}
			cursor.close();
			db.close();
		}
		return accounts;
	}

	/**
	 * 根据用户名查询所有信息
	 */
	public List<Account> findAllByName(String userName) {
		List<Account> accounts = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.rawQuery("select * from account where name=?",
					new String[] { userName });
			accounts = new ArrayList<Account>();
			while (cursor.moveToNext()) {
				Account account = new Account();
				int id = cursor.getInt(cursor.getColumnIndex("accountid"));
				account.setId(id);
				String name = cursor.getString(cursor.getColumnIndex("name"));
				account.setName(name);
				float money = Float.parseFloat(cursor.getString(cursor
						.getColumnIndex("money")));
				account.setMoney(money);
				String time = cursor.getString(cursor.getColumnIndex("time"));
				account.setTime(time);
				String type = cursor.getString(cursor.getColumnIndex("type"));
				account.setType(type);
				long earnings = cursor.getLong(cursor
						.getColumnIndex("earnings"));
				if (earnings == 0) {
					account.setEarnings(false);
				} else {
					account.setEarnings(true);
				}
				String remark = cursor.getString(cursor
						.getColumnIndex("remark"));
				account.setRemark(remark);
				accounts.add(account);
			}
			cursor.close();
			db.close();
		}
		return accounts;
	}

	/**
	 * 根据用户名查询所有收入信息
	 */
	public List<Account> findTotalIntoByName(String userName) {
		List<Account> accounts = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.rawQuery(
					"select * from account where earnings=1 and name=?",
					new String[] { userName });
			accounts = new ArrayList<Account>();
			while (cursor.moveToNext()) {
				Account account = new Account();
				int id = cursor.getInt(cursor.getColumnIndex("accountid"));
				account.setId(id);
				String name = cursor.getString(cursor.getColumnIndex("name"));
				account.setName(name);
				float money = Float.parseFloat(cursor.getString(cursor
						.getColumnIndex("money")));
				account.setMoney(money);
				String time = cursor.getString(cursor.getColumnIndex("time"));
				account.setTime(time);
				String type = cursor.getString(cursor.getColumnIndex("type"));
				account.setType(type);
				long earnings = cursor.getLong(cursor
						.getColumnIndex("earnings"));
				if (earnings == 0) {
					account.setEarnings(false);
				} else {
					account.setEarnings(true);
				}
				String remark = cursor.getString(cursor
						.getColumnIndex("remark"));
				account.setRemark(remark);
				accounts.add(account);
			}
			cursor.close();
			db.close();
		}
		return accounts;
	}

	/**
	 * 根据用户名查询所有支出信息
	 */
	public List<Account> findTotalOutByName(String userName) {
		List<Account> accounts = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.rawQuery(
					"select * from account where earnings=0 and name=?",
					new String[] { userName });
			accounts = new ArrayList<Account>();
			while (cursor.moveToNext()) {
				Account account = new Account();
				int id = cursor.getInt(cursor.getColumnIndex("accountid"));
				account.setId(id);
				String name = cursor.getString(cursor.getColumnIndex("name"));
				account.setName(name);
				float money = Float.parseFloat(cursor.getString(cursor
						.getColumnIndex("money")));
				account.setMoney(money);
				String time = cursor.getString(cursor.getColumnIndex("time"));
				account.setTime(time);
				String type = cursor.getString(cursor.getColumnIndex("type"));
				account.setType(type);
				long earnings = cursor.getLong(cursor
						.getColumnIndex("earnings"));
				if (earnings == 0) {
					account.setEarnings(false);
				} else {
					account.setEarnings(true);
				}
				String remark = cursor.getString(cursor
						.getColumnIndex("remark"));
				account.setRemark(remark);
				accounts.add(account);
			}
			cursor.close();
			db.close();
		}
		return accounts;
	}

	/**
	 * 根据用户名查询没时间段的账单信息
	 */
	public List<Account> findSomeTimeByName(String userName, String sometime) {
		List<Account> accounts = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.rawQuery(
					"select * from account where name=? and time like ?",
					new String[] { userName, sometime });
			accounts = new ArrayList<Account>();
			while (cursor.moveToNext()) {
				Account account = new Account();
				int id = cursor.getInt(cursor.getColumnIndex("accountid"));
				account.setId(id);
				String name = cursor.getString(cursor.getColumnIndex("name"));
				account.setName(name);
				float money = Float.parseFloat(cursor.getString(cursor
						.getColumnIndex("money")));
				account.setMoney(money);
				String time = cursor.getString(cursor.getColumnIndex("time"));
				account.setTime(time);
				String type = cursor.getString(cursor.getColumnIndex("type"));
				account.setType(type);
				long earnings = cursor.getLong(cursor
						.getColumnIndex("earnings"));
				if (earnings == 0) {
					account.setEarnings(false);
				} else {
					account.setEarnings(true);
				}
				String remark = cursor.getString(cursor
						.getColumnIndex("remark"));
				account.setRemark(remark);
				accounts.add(account);
			}
			cursor.close();
			db.close();
		}
		return accounts;
	}

	/**
	 * 查询所有信息
	 */
	public Cursor findAllbyCursor() {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			/*
			 * Cursor cursor = db.query("person", null, null, null, null, null,
			 * null);
			 */
			Cursor cursor = db
					.rawQuery(
							"select accountid  as _id ,name ,time ,money ,type ,earnings ,remark  from account",
							null);

			return cursor;
			// 注意了 一定不要把数据库 关闭了
		}
		return null;
	}

	/**
	 * 查询所有总收入
	 */
	public float fillTotalInto(String name) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=1 and name=?",
							new String[] { name });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询所有总支出
	 */
	public float fillTotalOut(String name) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=0 and name=?",
							new String[] { name });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询今天所有支出
	 */
	public float fillTodayOut(String name, String time) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=0 and name=? and time=?",
							new String[] { name, time });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询今天所有收入
	 */
	public float fillTodayInto(String name, String time) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=1 and name=? and time=?",
							new String[] { name, time });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询本月所有支出
	 */
	public float fillMonthOut(String name, String time) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=0 and name=? and time like ?",
							new String[] { name, time });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询本月所有收入
	 */
	public float fillMonthInto(String name, String time) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=1 and name=? and time like ?",
							new String[] { name, time });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询本年所有支出
	 */
	public float fillYearOut(String name, String time) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=0 and name=? and time like ?",
							new String[] { name, time });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}

	/**
	 * 查询本年所有收入
	 */
	public float fillYearInto(String name, String time) {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db
					.rawQuery(
							"select sum(money) as sumvalue from account where earnings=1 and name=? and time like ?",
							new String[] { name, time });
			while (cursor.moveToNext()) {
				return cursor.getFloat(cursor.getColumnIndex("sumvalue"));
			}
			cursor.close();
			db.close();
		}
		return 0;
	}
	
	/**
	 * 根据id查询记录信息
	 */
	public Account findInfoById(String accountid) {
		Account account = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.rawQuery("select * from account where accountid=?",
					new String[] { accountid });
			while (cursor.moveToNext()) {
				account = new Account();
				int id = cursor.getInt(cursor.getColumnIndex("accountid"));
				account.setId(id);
				String name = cursor.getString(cursor.getColumnIndex("name"));
				account.setName(name);
				float money = Float.parseFloat(cursor.getString(cursor
						.getColumnIndex("money")));
				account.setMoney(money);
				String time = cursor.getString(cursor.getColumnIndex("time"));
				account.setTime(time);
				String type = cursor.getString(cursor.getColumnIndex("type"));
				account.setType(type);
				long earnings = cursor.getLong(cursor
						.getColumnIndex("earnings"));
				if (earnings == 0) {
					account.setEarnings(false);
				} else {
					account.setEarnings(true);
				}
				String remark = cursor.getString(cursor
						.getColumnIndex("remark"));
				account.setRemark(remark);
			}
			cursor.close();
			db.close();
		}
		return account;
	}
}


package com.seventh.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class MyDBOpenHelper extends SQLiteOpenHelper {

	public MyDBOpenHelper(Context context) {
		super(context, "PersonalFinanceSystem.db", null, 1);
	}

	// 数据库第一次被创建的时候 调用 
	@Override
	public void onCreate(SQLiteDatabase db) {
		db.execSQL("CREATE TABLE IF NOT EXISTS person (personid INTEGER primary key autoincrement, name varchar(20) ,possward varchar(10) ,login BOOLEAN)");
		db.execSQL("CREATE TABLE IF NOT EXISTS account (accountid INTEGER primary key autoincrement, time varchar(10) ,money float ,type varchar(20) , earnings BOOLEAN ,remark varchar(50)  ,name varchar(20))");
	}
	
	//修改数据库
	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		// TODO Auto-generated method stub

	}


}


package com.seventh.db;

public class Person {
	private int id;
	private String name;
	private boolean login;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isLogin() {
		return login;
	}

	public void setLogin(boolean login) {
		this.login = login;
	}

	

}


package com.seventh.db;

import java.util.ArrayList;
import java.util.List;


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class PersonDBdao {
	private Context context;
	MyDBOpenHelper dbOpenHelper;

	public PersonDBdao(Context context) {
		this.context = context;
		dbOpenHelper = new MyDBOpenHelper(context);
	}
	
	/**
	 * 添加一条记录
	 */
	public void add(String name, String pwd) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			// db.execSQL("insert into person (name,age) values (?,?)",new Object[]{name,age});
			// db.execSQL("insert into person ",null) // 不合法的sql语句
			ContentValues values = new ContentValues();
			values.put("name", name);
			values.put("possward", pwd);
			values.put("login", false);
			// 如果 contentvalues为空
			db.insert("person", null, values); // 组拼sql语句完成的添加的操作
			
			// insert into person name values (NULL) ;
			db.close();
		}

	}

	/**
	 * 删除一条记录
	 */
	public void delete(String name) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			db.delete("person", "name=?", new String[] { name });
			db.close();
		}
	}

	/**
	 * 数据库的更改操作
	 * 帐户名 密码
	 */
	public void update(String name, String newname, String newpwd) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			ContentValues values = new ContentValues();
			values.put("name", newname);
			values.put("possward", newpwd);
			values.put("login", false);
			db.update("person", values, "name=?", new String[] { name });
			db.close();
		}
	}
	/**
	 * 数据库的更改操作
	 * 登录记录
	 */
	public void updateLoginOK(String name) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			ContentValues values = new ContentValues();
			values.put("login", true);
			db.update("person", values, "name=?", new String[] { name });
			db.close();
		}
	}
	
	/**
	 * 数据库的更改操作
	 * 登录记录
	 */
	public void updateLoginCancel(String name) {
		SQLiteDatabase db = dbOpenHelper.getWritableDatabase();
		if (db.isOpen()) {
			ContentValues values = new ContentValues();
			values.put("login", false);
			db.update("person", values, "name=?", new String[] { name });
			db.close();
		}
	}

	/**
	 * 数据库的查询操作 判断有无该数据
	 * 判断用户是否存在
	 */
	public boolean find(String name) {
		boolean result = false;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			// select * from person
			Cursor cursor = db.query("person", null, "name=?",
					new String[] { name }, null, null, null);
			if (cursor.moveToFirst()) {
				result = true;
			}
			cursor.close();
			db.close();
		}
		return result;

	}

	/**
	 * 数据库的查询操作 判断有无该数据
	 * 判断登录结果
	 */
	public boolean findLogin(String name,String pwd) {
		boolean result = false;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			// select * from person
			Cursor cursor = db.query("person", null, "name=? and possward=?",
					new String[] { name ,pwd}, null, null, null);
			if (cursor.moveToFirst()) {
				result = true;
			}
			cursor.close();
			db.close();
		}
		return result;

	}
	
	
	/**
	 * 查询所有信息
	 */
	public List<Person> findAll() {
		List<Person> persons = null;
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.query("person", null, null, null, null, null,
					null);
			persons = new ArrayList<Person>();
			while (cursor.moveToNext()) {
				Person person = new Person();
				String name = cursor.getString(cursor.getColumnIndex("name"));
				person.setName(name);
				long login = cursor.getLong(cursor.getColumnIndex("login"));
				if(login==0){
					person.setLogin(false);
				}else{
					person.setLogin(true);
				}
				
				persons.add(person);
			}
			cursor.close();
			db.close();
		}
		return persons;
	}


	/**
	 * 查询所有信息
	 */
	public Cursor findAllbyCursor() {
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			/*Cursor cursor = db.query("person", null, null, null, null, null,
					null);*/
			Cursor cursor = db.rawQuery("select personid as _id,name from person", null);
			cursor.close(); //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
			return cursor;
			
			// 注意了  一定不要把数据库 关闭了 
			}
		return null;
		
	}
	
	public Person findLoginOk() {
		Person person = null; 
		SQLiteDatabase db = dbOpenHelper.getReadableDatabase();
		if (db.isOpen()) {
			Cursor cursor = db.rawQuery("select personid as _id,name from person where login=1", null);
			if (cursor.moveToNext()) {
				person = new Person();
				String name = cursor.getString(cursor.getColumnIndex("name"));
				person.setName(name);
				person.setLogin(true);
			}
			cursor.close();
			db.close();
		}
		return person;
	}

}


package com.seventh.db.test;

import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;

import com.seventh.db.Account;
import com.seventh.db.AccountDBdao;

import android.test.AndroidTestCase;

public class TestAccount extends AndroidTestCase {
	public void testfind() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		boolean result = dao.find("admin1");
		assertEquals(true, result);
	}

	public void testAdd() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00")); // 获取东八区时间
		int year = c.get(Calendar.YEAR); // 获取年
		int month = c.get(Calendar.MONTH) + 1; // 获取月份，0表示1月份
		int day = c.get(Calendar.DAY_OF_MONTH); // 获取当前天数
		String time = year + "/" + month + "/" + day;// 获取系统当前时间
		for (int i = 0; i < 5; i++) {
			dao.add(time, 100, "衣", false, "", "admin1");
		}

	}

	public void testDelete() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		dao.delete("1");
	}

	public void testUpdate() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String time = 2014 + "/" + 5 + "/" + 18;// 获取系统当前时间
		dao.update("1", time, 123, "衣", true, "");
	}

	public void testfindall() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		List<Account> accounts = dao.findAll();
		// assertEquals(100, persons.size());
		for (Account account : accounts) {
			System.out.print(account.getId() + "  ");
			System.out.print(account.getName() + "  ");
			System.out.print(account.getTime() + "  ");
			System.out.print(account.getType() + "  ");
			System.out.print(account.isEarnings() + "  ");
			System.out.println(account.getMoney());
		}
	}

	public void testfindallbyname() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		List<Account> accounts = dao.findAllByName("admin1");
		// assertEquals(100, persons.size());
		for (Account account : accounts) {
			System.out.print(account.getId() + "  ");
			System.out.print(account.getName() + "  ");
			System.out.print(account.getTime() + "  ");
			System.out.print(account.getType() + "  ");
			System.out.print(account.isEarnings() + "  ");
			System.out.println(account.getMoney());
		}
	}

	public void testfindsometimebyname() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		List<Account> accounts = dao.findSomeTimeByName("admin1", "2014/5%");
		for (Account account : accounts) {
			System.out.print(account.getId() + "  ");
			System.out.print(account.getName() + "  ");
			System.out.print(account.getTime() + "  ");
			System.out.print(account.getType() + "  ");
			System.out.print(account.isEarnings() + "  ");
			System.out.println(account.getMoney());
		}
	}

	public void testfillTotalInto() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillTotalInto("admin1") + "";
		System.out.println(all);
	}

	public void testfillTotalOut() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillTotalOut("admin1") + "";
		System.out.println(all);
	}

	public void testfillTodayOut() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillTodayOut("admin1", "2014/5/18") + "";
		System.out.println(all);
	}

	public void testfillTodayInto() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillTodayInto("admin1", "2014/5/20") + "";
		System.out.println(all);
	}

	public void testfillMonthInto() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillMonthInto("admin1", "2014/5%") + "";
		System.out.println(all);
	}

	public void testfillMonthOut() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillMonthOut("admin1", "2014/5%") + "";
		System.out.println(all);
	}

	public void testfillYearOut() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillYearOut("admin1", "2014%") + "";
		System.out.println(all);
	}

	public void testfillYearInto() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		String all = dao.fillYearInto("admin1", "2014%") + "";
		System.out.println(all);
	}

	public void testfindinfobyid() throws Exception {
		AccountDBdao dao = new AccountDBdao(getContext());
		Account account = dao.findInfoById("1");

		System.out.print(account.getId() + "  ");
		System.out.print(account.getName() + "  ");
		System.out.print(account.getTime() + "  ");
		System.out.print(account.getType() + "  ");
		System.out.print(account.isEarnings() + "  ");
		System.out.println(account.getMoney());

	}
}


package com.seventh.db.test;

import java.util.List;

import com.seventh.db.Person;
import com.seventh.db.PersonDBdao;

import android.test.AndroidTestCase;

public class TestPersonDao extends AndroidTestCase {

	public void testfind() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		boolean result = dao.find("admin1");
		assertEquals(true, result);
	}

	public void testfindLogin() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		boolean result = dao.findLogin("admin", "123456");
		assertEquals(true, result);
	}

	public void testAdd() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		String a;
		for (int i = 0; i < 10; i++) {
			a = "admin" + i;
			dao.add(a, "123456");
		}

	}

	public void testDelete() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		dao.delete("admin9");
	}

	public void testUpdate() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		dao.update("admin8", "admin0", "123456");
	}

	public void testfindall() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		List<Person> persons = dao.findAll();
		for (Person person : persons) {
			System.out.println(person.getName());
			System.out.println(person.isLogin());
		}
	}

	public void testfindloginok() throws Exception {
		PersonDBdao dao = new PersonDBdao(getContext());
		Person person = dao.findLoginOk();

		if(person==null){
			
		}else{
		System.out.println(person.getName());
		System.out.println(person.isLogin());
		}

	}

}


package com.seventh.personalfinance;

import java.util.Calendar;
import java.util.TimeZone;

import com.seventh.db.AccountDBdao;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class AddNodes extends Activity implements OnClickListener {
	private String name;// 账号
	AccountDBdao accountDBdao;

	private EditText mEditTextMoney;// 金额
	private EditText mEditTextRemark;// 备注
	private EditText mEditTextTime; // 时间
	private Spinner mSpinnerType; // 类型
	private Spinner mSpinnerEarnings; // 收益
	private Button mButtonAdd;
	private Button mButtonCancel;

	private String time;
	private float money;
	private String type;
	private boolean earning;
	private String remark;

	private static final String[] types = { "衣服装饰", "工资奖金", "投资盈利", "出行交通",
			"娱乐聚会", "生活用品", "水电房租", "缴费清单", "股票收益", "其他" };
	private static final String[] earnings = { "支出", "收入" };

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_addnodes);

		Intent intent = this.getIntent();
		name = intent.getStringExtra("name");// 接收登录界面的数据

		mEditTextMoney = (EditText) this.findViewById(R.id.et_addnodes_money);// 金额
		mEditTextRemark = (EditText) this.findViewById(R.id.et_addnodes_remark);// 备注
		mEditTextTime = (EditText) this.findViewById(R.id.et_addnodes_time);// 时间

		Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00")); // 获取东八区时间
		int year = c.get(Calendar.YEAR); // 获取年
		int month = c.get(Calendar.MONTH) + 1; // 获取月份，0表示1月份
		int day = c.get(Calendar.DAY_OF_MONTH); // 获取当前天数
		time = year + "/" + month + "/" + day;// 获取系统当前时间
		mEditTextTime.setText(time);// 设置时间

		// 类型
		mSpinnerType = (Spinner) this.findViewById(R.id.sp_addnodes_type);
		// 将可选内容与mSpinnerType连接起来
		ArrayAdapter<String> adapterType = new ArrayAdapter<String>(this,
				R.layout.addnodes_earnings, types);
		// 设置下拉列表的风格
		adapterType
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		// 将adapterType 添加到mSpinnerType中
		mSpinnerType.setAdapter(adapterType);

		// 收益
		mSpinnerEarnings = (Spinner) this
				.findViewById(R.id.sp_addnodes_earnings);
		ArrayAdapter<String> adapterEarnings = new ArrayAdapter<String>(this,
				R.layout.addnodes_earnings, earnings);
		adapterEarnings
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mSpinnerEarnings.setAdapter(adapterEarnings);

		mButtonAdd = (Button) this.findViewById(R.id.bt_addnodes_add);
		mButtonCancel = (Button) this.findViewById(R.id.bt_addnodes_cancel);
		mButtonAdd.setOnClickListener(this);
		mButtonCancel.setOnClickListener(this);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_addnodes_add:// 添加按钮
			if (mEditTextMoney.getText().toString().trim().equals("")) {
				Toast.makeText(getApplicationContext(), "金额不能为空！", 0).show();
				break;
			} else {
				money = Float.parseFloat(mEditTextMoney.getText().toString()
						.trim());
			}
			time = mEditTextTime.getText().toString().trim();
			type = mSpinnerType.getSelectedItem().toString();
			if (mSpinnerEarnings.getSelectedItem().toString().equals("收入")) {
				earning = true;
			} else {
				earning = false;
			}
			remark = mEditTextRemark.getText().toString().trim();

			accountDBdao = new AccountDBdao(getApplicationContext());
			accountDBdao.add(time, money, type, earning, remark, name);
			Toast.makeText(getApplicationContext(), "添 加 账 单 条 目 成 功 ！", 0)
					.show();
			break;
		case R.id.bt_addnodes_cancel:// 取消按钮
			Intent intent = new Intent(this, MainActivity.class);
			intent.putExtra("name", name);
			// 传值 帐户名
			startActivity(intent);
			break;

		}

	}

}


package com.seventh.personalfinance;



import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.widget.ImageView;

public class FightActivity extends Activity {
    private ImageView welcomeImg = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_fight);
        welcomeImg = (ImageView) this.findViewById(R.id.welcome_img);
        AlphaAnimation anima = new AlphaAnimation(0.3f, 1.0f);
        anima.setDuration(3000);// 设置动画显示时间
        welcomeImg.startAnimation(anima);
        anima.setAnimationListener(new AnimationImpl());

    }

    private class AnimationImpl implements AnimationListener {

        @Override
        public void onAnimationStart(Animation animation) {
            welcomeImg.setBackgroundResource(R.drawable.welcome);
        }

        @Override
        public void onAnimationEnd(Animation animation) {
            skip(); // 动画结束后跳转到别的页面
        }

        @Override
        public void onAnimationRepeat(Animation animation) {

        }

    }

    private void skip() {
        startActivity(new Intent(FightActivity.this, MainActivity.class));
      
    }
}


package com.seventh.personalfinance;


import com.seventh.db.Person;
import com.seventh.db.PersonDBdao;

import android.os.Bundle;
import android.app.Activity;

import android.content.Intent;

import android.view.Menu;
import android.view.View;
import android.view.Window;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class Login extends Activity implements OnClickListener {
	PersonDBdao persondbdao;
	private Person person;
	private EditText mEditTextName;// 账号
	private EditText mEditTextPwd;// 密码
	private Button mButtonOK;
	private Button mButtonCancel;
	private TextView mTextViewRegister;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);// 去掉标题
		setContentView(R.layout.activity_login);
		
		LoginOk();
		
		mEditTextName = (EditText) this.findViewById(R.id.et_login_name);
		mEditTextPwd = (EditText) this.findViewById						(R.id.et_login_password);
		mButtonOK = (Button) this.findViewById(R.id.bt_login_ok);
		mButtonCancel = (Button) this.findViewById(R.id.bt_login_cancel);
		mTextViewRegister = (TextView) this
				.findViewById(R.id.tv_login_register_link);
		mButtonOK.setOnClickListener(this);
		mButtonCancel.setOnClickListener(this);
		mTextViewRegister.setOnClickListener(this);

	}

	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
	}

	private void LoginOk() {
		persondbdao = new PersonDBdao(getApplicationContext());
		person = persondbdao.findLoginOk();
		if (person == null) {

		} else {
			Intent intent = new Intent(this, MainActivity.class);
			intent.putExtra("name", person.getName());
			// 传值 帐户名
			startActivity(intent);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	// 按钮对应的点击事件
	// 参数 v 代表的就是当前被点击的条目对应的view对象
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_login_ok:// 登录按钮
			// 相应按钮的点击事件)
			if (mEditTextName.getText().toString().trim().equals("")) 	{
				Toast.makeText(getApplicationContext(), "账户名不能			为空！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			if (mEditTextPwd.getText().toString().equals("")) {
				Toast.makeText(getApplicationContext(), "密码不能为			空！",
						Toast.LENGTH_SHORT).show();
				break;
			}

			persondbdao = new PersonDBdao(getApplicationContext());
			boolean result = persondbdao.find(mEditTextName.getText()
					.toString());

			if (result) {
				result = persondbdao.findLogin(mEditTextName.getText	()
						.toString(), mEditTextPwd.getText	().toString());
				if (result) {
					persondbdao.updateLoginOK	(mEditTextName.getText()
							.toString());
					Intent intent = new Intent(this, 	MainActivity.class);
					// Intent intent = new Intent();
					// intent.setClassName	("com.seventh.personalfinance",
					// 	"com.seventh.personalfinance.MainActivity");

					intent.putExtra("name", mEditTextName.getText	().toString()
							.trim());
					// 传值 帐户名
					startActivity(intent);
				} else {
					Toast.makeText(getApplicationContext(), "密码	有误", 0).show();
				}
			} else {
				Toast.makeText(getApplicationContext(), "不存在该账	号", 0).show();
			}

			break;
		case R.id.bt_login_cancel:// 登录取消
			System.exit(0);
			break;
		case R.id.tv_login_register_link:
			Intent intent = new Intent(this, Registration.class);
			startActivity(intent);
			break;
		}

	}
}


package com.seventh.personalfinance;

import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;


import com.seventh.db.AccountDBdao;
import com.seventh.db.PersonDBdao;
import com.seventh.view.CornerListView;
import com.seventh.view.DataRange;
import com.seventh.view.MainActivityService;
import com.seventh.view.PieChart;


import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

public class MainActivity extends Activity implements OnClickListener,
		OnTouchListener, OnGestureListener {
	private Intent intent = null;// 定义一个意图
	private String name;// 账号
	private String pwd1;
	private String pwd2;
	AccountDBdao accountDBdao;// 数据库
	PersonDBdao persondbdao;

	private EditText mEditTextName;// 账号
	private EditText mEditTextPwd1;// 密码
	private EditText mEditTextPwd2;// 密码
	private Button mButtonOK;
	private Button mButtonCancel;

	private TextView mTextViewTime;// 时间
	private Button mButtonAddNodes;// 记一笔按钮

	private PieChart piechart;// 饼形图
	private LinearLayout piechar;
	private int varlue1;// 收入比例
	private int varlue2;// 支出比例

	private float totalOut;// 总支出
	private float totalInto;// 总收入

	private CornerListView cornerListView1 = null;// 自定义listview1
	private List<Map<String, String>> map_list1 = null;

	private CornerListView cornerListView2 = null;// 自定义listview2
	private List<DataRange> dataRanges;
	private LayoutInflater inflater;

	private LinearLayout ll_right;
	private LinearLayout ll_left;
	private GestureDetector mGestureDetector; // 手势检测器

	private int window_width; // 屏幕的宽度
	private static float SNAP_VELOCITY = 400; // x方向上滑动的距离
	private int SPEED = 30; // 滑动的速度
	private int MAX_WIDTH = 0; // 滑动的最大距离
	private int mScrollX;
	private boolean isScrolling = false;
	private boolean isFinish = true;
	private boolean isMenuOpen = false;
	private boolean hasMeasured = false; // 是否Measured.

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_mainactivity);

		intent = this.getIntent();
		name = intent.getStringExtra("name");// 接收登录界面的数据
		if (name == null) {
			intent = new Intent(this, Login.class);
			startActivity(intent);
			finish();
		} else {

			// 设置时间
			mTextViewTime = (TextView) this.findViewById(R.id.tv_main_time);
			mTextViewTime.setText(GetTime());// 设置时间

			accountDBdao = new AccountDBdao(getApplicationContext());
			totalOut = accountDBdao.fillTotalOut(name);// 总支出
			totalInto = accountDBdao.fillTotalInto(name);// 总收入

			// 设置饼形图
			SetVarlue(totalOut, totalInto);
			piechar = (LinearLayout) findViewById(R.id.barchart);
			piechart = new PieChart();
			piechart.paintingPieChart(getApplicationContext(), piechar,
					varlue1, varlue2);

			// 设置listview1 值
			cornerListView1 = (CornerListView) findViewById(R.id.lv_main_calculation);
			map_list1 = MainActivityService.getDataSource1(totalInto, totalOut);
			// listview1适配器
			SimpleAdapter adapter1 = new SimpleAdapter(getApplicationContext(),
					map_list1, R.layout.main_listview_calculation,
					new String[] { "txtCalculationName", "txtMoney" },
					new int[] { R.id.ls_tv_txtCalculationName,
							R.id.ls_tv_txtMoney });
			// 填充listview1的数据
			cornerListView1.setAdapter(adapter1);

			// 设置listview2 值
			inflater = LayoutInflater.from(this);
			cornerListView2 = (CornerListView) findViewById(R.id.lv_main_datareport);
			try {
				dataRanges = MainActivityService.getDataSource2(name,
						getApplicationContext());
			} catch (Exception e) {
				Toast.makeText(this, "获取数据失败", 0).show();
				e.printStackTrace();
			}
			// 填充listview2的数据
			cornerListView2.setAdapter(new MyAdapter());

			
			// listview1选项的点击事件 收入总额 支出总额 预算余额
			cornerListView1.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> arg0, View arg1,
						int arg2, long arg3) {
					switch (arg2) {
					case 0:
						TotalIntoData();
						break;
					case 1:
						TotalOutData();
						break;
					case 2:
						TotalAllData();
						break;
					}

				}
			});

			// listview2选项的点击事件      一览表
			cornerListView2.setOnItemClickListener(new OnItemClickListener() {

				@Override
				public void onItemClick(AdapterView<?> arg0, View arg1,
						int arg2, long arg3) {
					switch (arg2) {
					case 0:
						TodayData();
						break;
					case 1:
						MonthData();
						break;
					case 2:
						YearData();
						break;
					}
				}
			});

			mEditTextName = (EditText) this.findViewById(R.id.et_main_username);
			mEditTextName.setText(name);
			mEditTextPwd1 = (EditText) this.findViewById(R.id.et_main_new_pwd);
			mEditTextPwd2 = (EditText) this
					.findViewById(R.id.et_main_confirm_pwd);
			mButtonOK = (Button) this.findViewById(R.id.bt_main_ok);
			mButtonCancel = (Button) this.findViewById(R.id.bt_main_cancel);
			mButtonAddNodes = (Button) this.findViewById(R.id.bt_main_addnotes);
			mButtonOK.setOnClickListener(this);
			mButtonCancel.setOnClickListener(this);
			mButtonAddNodes.setOnClickListener(this);

			ll_right = (LinearLayout) findViewById(R.id.layout_right);// 滑动的菜单
			ll_left = (LinearLayout) findViewById(R.id.layout_left);
			ll_right.setOnTouchListener(this);
			mGestureDetector = new GestureDetector(this);
			mGestureDetector.setIsLongpressEnabled(false);// 禁用长按监听
			getMaxX();
		}
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_main_addnotes:
			intent = new Intent(this, AddNodes.class);
			intent.putExtra("name", name);
			// 传值 帐户名
			startActivity(intent);
			break;
		case R.id.bt_main_ok:
			name = mEditTextName.getText().toString();
			pwd1 = mEditTextPwd1.getText().toString().trim();
			pwd2 = mEditTextPwd2.getText().toString().trim();

			if (name.equals("")) {
				Toast.makeText(getApplicationContext(), "账户名不能为空！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			if (pwd1.equals("")) {
				Toast.makeText(getApplicationContext(), "密码不能为空！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			if (!pwd1.equals(pwd2)) {
				Toast.makeText(getApplicationContext(), "确认密码不同！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			persondbdao = new PersonDBdao(getApplicationContext());
			persondbdao.update(name, name, pwd2);
			Toast.makeText(getApplicationContext(), "修改成功！", Toast.LENGTH_SHORT)
					.show();

			finish();
			break;
		case R.id.bt_main_cancel:
			persondbdao = new PersonDBdao(getApplicationContext());
			persondbdao.updateLoginCancel(name);
			intent = new Intent(this, Login.class);
			startActivity(intent);
			finish();
			break;
		}
	}

	// 跳转到收入账单
	public void TotalIntoData() {
		intent = new Intent(this, SpecificData.class);
		intent.putExtra("name", name);
		intent.putExtra("title", "收入账单");
		startActivity(intent);
	}

	// 跳转到支出账单
	public void TotalOutData() {
		intent = new Intent(this, SpecificData.class);
		intent.putExtra("name", name);
		intent.putExtra("title", "支出账单");
		startActivity(intent);
	}

	// 跳转到详细账单
	public void TotalAllData() {
		intent = new Intent(this, SpecificData.class);
		intent.putExtra("name", name);
		intent.putExtra("title", "详细账单");
		startActivity(intent);
	}

	// 跳转到今日账单
	public void TodayData() {
		intent = new Intent(this, SpecificData.class);
		intent.putExtra("name", name);
		intent.putExtra("title", "今日账单");
		startActivity(intent);
	}

	// 跳转到本月账单
	public void MonthData() {
		intent = new Intent(this, SpecificData.class);
		intent.putExtra("name", name);
		intent.putExtra("title", "本月账单");
		startActivity(intent);
	}

	// 跳转到本年账单
	public void YearData() {
		intent = new Intent(this, SpecificData.class);
		intent.putExtra("name", name);
		intent.putExtra("title", "本年账单");
		startActivity(intent);
	}

	// 设置时间
	public String GetTime() {
		Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00")); // 获取东八区时间
		int year = c.get(Calendar.YEAR); // 获取年
		int month = c.get(Calendar.MONTH) + 1; // 获取月份，0表示1月份
		int day = c.get(Calendar.DAY_OF_MONTH); // 获取当前天数
		String time = year + "/" + month + "/" + day;
		return time;
	}

	
	// 设置饼形图比例
	public void SetVarlue(float totalInto, float totalOut) {
		// 根据总支出与总收入变化饼形图
		if ((totalInto - totalOut) < 0) {
			varlue1 = 0;
			varlue2 = 1;
		} else if (totalInto == totalOut) {
			varlue1 = 1;
			varlue2 = 1;
		} else {
			varlue1 = (int) totalInto;
			varlue2 = (int) totalOut;
		}
	}

	// listview2适配器
	private class MyAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return dataRanges.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return dataRanges.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View view = inflater.inflate(R.layout.main_listview_datareport,
					null);
			DataRange aboutBillData = dataRanges.get(position);

			TextView tv2_text1 = (TextView) view
					.findViewById(R.id.ls_tv2_txtDataRange);
			TextView tv2_text2 = (TextView) view
					.findViewById(R.id.ls_tv2_txtInto);
			TextView tv2_text3 = (TextView) view
					.findViewById(R.id.ls_tv2_txtOut);
			tv2_text1.setText(aboutBillData.getText1());
			tv2_text2.setText(aboutBillData.getText2());
			tv2_text3.setText(aboutBillData.getText3());

			return view;
		}

	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		mTextViewTime.setText(GetTime());// 设置时间

		totalOut = accountDBdao.fillTotalOut(name);// 总支出
		totalInto = accountDBdao.fillTotalInto(name);// 总收入
		SetVarlue(totalInto, totalOut);
		piechart = new PieChart();
		piechart.paintingPieChart(getApplicationContext(), piechar, varlue1,
				varlue2);

		map_list1 = MainActivityService.getDataSource1(totalInto, totalOut);
		// listview1适配器
		SimpleAdapter adapter1 = new SimpleAdapter(getApplicationContext(),
				map_list1, R.layout.main_listview_calculation, new String[] {
						"txtCalculationName", "txtMoney" }, new int[] {
						R.id.ls_tv_txtCalculationName, R.id.ls_tv_txtMoney });
		// 填充listview1的数据
		cornerListView1.setAdapter(adapter1);

		try {
			dataRanges = MainActivityService.getDataSource2(name,
					getApplicationContext());
		} catch (Exception e) {
			Toast.makeText(this, "获取数据失败", 0).show();
			e.printStackTrace();
		}
		// 填充listview2的数据
		cornerListView2.setAdapter(new MyAdapter());
	}

	void getMaxX() {// 得到滑动的最大宽度,即此layout的宽度

		ViewTreeObserver viewTreeObserver = ll_right.getViewTreeObserver();
		viewTreeObserver.addOnPreDrawListener(new OnPreDrawListener() {
			@Override
			public boolean onPreDraw() {
				if (!hasMeasured) {
					window_width = getWindowManager().getDefaultDisplay()
							.getWidth(); // 屏幕宽度
					RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) ll_right
							.getLayoutParams(); // layout参数
					layoutParams.width = window_width;
					ll_right.setLayoutParams(layoutParams);
					hasMeasured = true;
					MAX_WIDTH = ll_left.getWidth();// 左边layout宽度
				}
				return true;
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onDown(MotionEvent e) {
		mScrollX = 0;
		isScrolling = false;
		return true;// 将之改为true，不然事件不会向下传递.
	}

	@Override
	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
			float velocityY) {
		int currentX = (int) e2.getX();
		int lastX = (int) e1.getX();

		if (isMenuOpen) {

			if (!isScrolling && currentX - lastX >= 0) {

				return false;
			}
		} else {

			if (!isScrolling && currentX - lastX <= 0) {

				return false;

			}
		}

		boolean suduEnough = false;

		if (velocityX > MainActivity.SNAP_VELOCITY
				|| velocityX < -MainActivity.SNAP_VELOCITY) {

			suduEnough = true;

		} else {

			suduEnough = false;

		}

		doCloseScroll(suduEnough);

		return false;
	}

	@Override
	public void onLongPress(MotionEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
			float distanceY) {
		if (isFinish)
			doScrolling(distanceX);
		return true;
	}

	@Override
	public void onShowPress(MotionEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean onSingleTapUp(MotionEvent e) {
		if (isFinish) {

			RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) ll_right
					.getLayoutParams();
			// 左移动
			if (layoutParams.leftMargin >= MAX_WIDTH) {
				new AsynMove().execute(-SPEED);
			} else {
				// 右移动
				new AsynMove().execute(SPEED);
			}
		}
		return true;
	}

	@Override
	public boolean onTouch(View v, MotionEvent event) {
		return mGestureDetector.onTouchEvent(event);
	}

	public void doScrolling(float distanceX) {
		isScrolling = true;
		mScrollX += distanceX;// distanceX:向左为正，右为负
		RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) ll_right
				.getLayoutParams();

		layoutParams.leftMargin -= mScrollX;
		layoutParams.rightMargin += mScrollX;

		if (layoutParams.leftMargin <= 0) {
			isScrolling = false;// 拖过头了不需要再执行AsynMove了
			layoutParams.leftMargin = 0;
			layoutParams.rightMargin = 0;

		} else if (layoutParams.leftMargin >= MAX_WIDTH) {
			// 拖过头了不需要再执行AsynMove了
			isScrolling = false;
			layoutParams.leftMargin = MAX_WIDTH;
		}
		ll_right.setLayoutParams(layoutParams);
		ll_left.invalidate();
	}

	public void doCloseScroll(boolean suduEnough) {
		if (isFinish) {

			RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) ll_right
					.getLayoutParams();

			int tempSpeed = SPEED;

			if (isMenuOpen) {
				tempSpeed = -tempSpeed;
			}

			if (suduEnough
					|| (!isMenuOpen && (layoutParams.leftMargin > window_width / 2))
					|| (isMenuOpen && (layoutParams.leftMargin < window_width / 2))) {

				new AsynMove().execute(tempSpeed);

			} else {

				new AsynMove().execute(-tempSpeed);

			}

		}
	}

	class AsynMove extends AsyncTask<Integer, Integer, Void> {

		@Override
		protected Void doInBackground(Integer... params) {
			isFinish = false;
			int times = 0;
			if (MAX_WIDTH % Math.abs(params[0]) == 0)// 整除
				times = MAX_WIDTH / Math.abs(params[0]);
			else
				times = MAX_WIDTH / Math.abs(params[0]) + 1;// 有余数

			for (int i = 0; i < times; i++) {
				publishProgress(params[0]);
				try {
					Thread.sleep(Math.abs(params[0]));
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) {
			isFinish = true;
			RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) ll_right
					.getLayoutParams();
			if (layoutParams.leftMargin >= MAX_WIDTH) {
				isMenuOpen = true;
			} else {
				isMenuOpen = false;
			}
			super.onPostExecute(result);
		}

		@Override
		protected void onProgressUpdate(Integer... values) {
			RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) ll_right
					.getLayoutParams();
			// 右移动
			if (values[0] > 0) {
				layoutParams.leftMargin = Math.min(layoutParams.leftMargin
						+ values[0], MAX_WIDTH);
				layoutParams.rightMargin = Math.max(layoutParams.rightMargin
						- values[0], -MAX_WIDTH);

			} else {
				// 左移动
				layoutParams.leftMargin = Math.max(layoutParams.leftMargin
						+ values[0], 0);

			}
			ll_right.setLayoutParams(layoutParams);
			ll_left.invalidate();
		}

	}
}

package com.seventh.personalfinance;

import com.seventh.db.Account;
import com.seventh.db.AccountDBdao;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class MoreAction extends Activity implements OnClickListener {
	private Intent intent = null;// 定义一个意图
	AccountDBdao accountDBdao;// 数据库
	private String name;// 账号
	private String title;// 标题
	private String id;// id

	private EditText mEditTextMoney;// 金额
	private EditText mEditTextRemark;// 备注
	private EditText mEditTextTime; // 时间
	private Spinner mSpinnerType; // 类型
	private Spinner mSpinnerEarnings; // 收益
	private Button mButtonUpdate;
	private Button mButtonDelete;
	private Button mButtonCancel;

	private String time;
	private float money;
	private String type;
	private boolean earning;
	private String remark;

	private Account account;

	private static final String[] types = { "衣服装饰", "工资奖金", "投资盈利", "出行交通",
			"娱乐聚会", "生活用品", "水电房租", "缴费清单", "股票收益", "其他" };
	private static final String[] earnings = { "支出", "收入" };

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_more_action);

		intent = this.getIntent();
		name = intent.getStringExtra("name");// 接收具体数据界面的数据
		title = intent.getStringExtra("title");// 接收具体数据界面的数据
		id = intent.getStringExtra("id");// 接收具体数据界面面的数据

		mEditTextMoney = (EditText) this.findViewById(R.id.et_moreaction_money);// 金额
		mEditTextRemark = (EditText) this
				.findViewById(R.id.et_moreaction_remark);// 备注
		mEditTextTime = (EditText) this.findViewById(R.id.et_moreaction_time);// 时间

		// 类型
		mSpinnerType = (Spinner) this.findViewById(R.id.sp_moreaction_type);
		// 将可选内容与mSpinnerType连接起来
		ArrayAdapter<String> adapterType = new ArrayAdapter<String>(this,
				R.layout.addnodes_earnings, types);
		// 设置下拉列表的风格
		adapterType
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		// 将adapterType 添加到mSpinnerType中
		mSpinnerType.setAdapter(adapterType);

		// 收益
		mSpinnerEarnings = (Spinner) this
				.findViewById(R.id.sp_moreaction_earnings);
		ArrayAdapter<String> adapterEarnings = new ArrayAdapter<String>(this,
				R.layout.addnodes_earnings, earnings);
		adapterEarnings
				.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		mSpinnerEarnings.setAdapter(adapterEarnings);

		mButtonUpdate = (Button) this.findViewById(R.id.bt_moreaction_update);
		mButtonDelete = (Button) this.findViewById(R.id.bt_moreaction_delete);
		mButtonCancel = (Button) this.findViewById(R.id.bt_moreaction_cancel);
		mButtonUpdate.setOnClickListener(this);
		mButtonDelete.setOnClickListener(this);
		mButtonCancel.setOnClickListener(this);

		// 设置初始显示的值
		accountDBdao = new AccountDBdao(getApplicationContext());
		account = accountDBdao.findInfoById(id);
		mEditTextMoney.setText(account.getMoney() + "");// 金额
		mEditTextRemark.setText(account.getRemark());// 备注
		mEditTextTime.setText(account.getTime()); // 时间
		// "衣", "食", "住", "行", "娱乐", "生活用品","水电", "其他"
		if (account.getType().equals("衣服装饰")) {
			mSpinnerType.setSelection(0);
		} else if (account.getType().equals("工资奖金")) {
			mSpinnerType.setSelection(1);
		} else if (account.getType().equals("投资盈利")) {
			mSpinnerType.setSelection(2);
		} else if (account.getType().equals("出行交通")) {
			mSpinnerType.setSelection(3);
		} else if (account.getType().equals("娱乐聚会")) {
			mSpinnerType.setSelection(4);
		} else if (account.getType().equals("生活用品")) {
			mSpinnerType.setSelection(5);
		} else if (account.getType().equals("水电房租")) {
			mSpinnerType.setSelection(6);
		} else if (account.getType().equals("缴费清单")) {
			mSpinnerType.setSelection(7);
		} else if (account.getType().equals("股票收益")) {
			mSpinnerType.setSelection(8);
		} 	
		else {
			mSpinnerType.setSelection(9);
		}
		// 收益
		if (account.isEarnings()) {
			mSpinnerEarnings.setSelection(1);
		} else {
			mSpinnerEarnings.setSelection(0);
		}

	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_moreaction_update:// 修改按钮
			if (mEditTextMoney.getText().toString().trim().equals("")) {
				Toast.makeText(getApplicationContext(), "金额不能为空！", 0).show();
				break;
			} else {
				money = Float.parseFloat(mEditTextMoney.getText().toString()
						.trim());
			}
			time = mEditTextTime.getText().toString().trim();
			type = mSpinnerType.getSelectedItem().toString();
			if (mSpinnerEarnings.getSelectedItem().toString().equals("收入")) {
				earning = true;
			} else {
				earning = false;
			}
			remark = mEditTextRemark.getText().toString().trim();

			accountDBdao = new AccountDBdao(getApplicationContext());
			accountDBdao.update(id, time, money, type, earning, remark);
			Toast.makeText(getApplicationContext(), "修 改 成  功 ！", 0).show();
			break;
		case R.id.bt_moreaction_delete:// 删除按钮
			accountDBdao = new AccountDBdao(getApplicationContext());
			accountDBdao.delete(id);
			Toast.makeText(getApplicationContext(), "删 除  成 功 ！", 0).show();
			finish();
			break;
		case R.id.bt_moreaction_cancel:// 取消按钮
			Intent intent = new Intent(this, SpecificData.class);
			intent.putExtra("name", name);
			intent.putExtra("title", title);
			// 传值 帐户名
			startActivity(intent);
			finish();
			break;
		}

	}

}


package com.seventh.personalfinance;



import com.seventh.db.PersonDBdao;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class Registration extends Activity implements OnClickListener {
	PersonDBdao persondbdao;
	private EditText mEditTextName;// 账号
	private EditText mEditTextPwd1;// 密码
	private EditText mEditTextPwd2;// 密码
	private Button mButtonOK;
	private Button mButtonCancel;
	
	private String name;
	private String pwd1;
	private String pwd2;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);//去掉标题
		setContentView(R.layout.activity_registration);
		
		mEditTextName = (EditText) this.findViewById(R.id.et_register_username);
		mEditTextPwd1 = (EditText) this.findViewById(R.id.et_register_new_pwd);
		mEditTextPwd2 = (EditText) this.findViewById(R.id.et_register_confirm_pwd);
		mButtonOK=(Button) this.findViewById(R.id.bt_register_ok);
		mButtonCancel=(Button) this.findViewById(R.id.bt_register_cancel);
		mButtonOK.setOnClickListener(this);
		mButtonCancel.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		switch(v.getId()){
		case R.id.bt_register_ok:
			name=mEditTextName.getText().toString();
			pwd1=mEditTextPwd1.getText().toString().trim();
			pwd2=mEditTextPwd2.getText().toString().trim();
			
			if (name.equals("")) {
				Toast.makeText(getApplicationContext(), "账户名不能为空！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			if (pwd1.equals("")) {
				Toast.makeText(getApplicationContext(), "密码不能为空！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			if (!pwd1.equals(pwd2)) {
				Toast.makeText(getApplicationContext(), "确认密码不同！",
						Toast.LENGTH_SHORT).show();
				break;
			}
			persondbdao = new PersonDBdao(getApplicationContext());
			persondbdao.add(name, pwd2);
			Toast.makeText(getApplicationContext(), "注 册 成 功 ！",
					Toast.LENGTH_SHORT).show();
			finish();
			break;
		case R.id.bt_register_cancel:
			finish();
			break;
		}
		
	}

}


package com.seventh.personalfinance;

import java.util.Calendar;
import java.util.List;
import java.util.TimeZone;

import com.seventh.db.Account;
import com.seventh.db.AccountDBdao;
import com.seventh.view.CornerListView;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;



public class SpecificData extends Activity {
	private Intent intent = null;// 定义一个意图
	private String name;// 账号
	private String title;// 标题
	AccountDBdao accountDBdao;// 数据库

	private TextView mTextViewTime;// 标题

	private String time1;
	private String time2;
	private String time3;
	
	private CornerListView cornerListView = null;// 数据报表
	private List<Account> accounts;// 账单数据
	private LayoutInflater inflater;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_specific_data);

		intent = this.getIntent();
		name = intent.getStringExtra("name");// 接收主界面的数据
		title = intent.getStringExtra("title");// 接收主界面的数据

		// 设置标题
		mTextViewTime = (TextView) this
				.findViewById(R.id.tv_specific_data_txtDataRange);
		mTextViewTime.setText(title);

		accountDBdao = new AccountDBdao(getApplicationContext());

		// 时间
		Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00")); // 获取东八区时间
		int year = c.get(Calendar.YEAR); // 获取年
		int month = c.get(Calendar.MONTH) + 1; // 获取月份，0表示1月份
		int day = c.get(Calendar.DAY_OF_MONTH); // 获取当前天数
		time1 = year + "/" + month + "/" + day;
		time2 = year + "/" + month + "%";
		time3 = year + "%";

		// 设置listview 值
		inflater = LayoutInflater.from(this);
		cornerListView = (CornerListView) findViewById(R.id.lv_specific_data_list);
		GetData();

		// 填充listview的数据
		cornerListView.setAdapter(new MyAdapter());
		// listview选项的点击事件
		cornerListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				Account account = accounts.get(arg2);
				GoMoreAction(account.getId(), name);

			}
		});
	}

	private void GoMoreAction(int id, String name) {
		// TODO Auto-generated method stub
		intent = new Intent(this, MoreAction.class);
		intent.putExtra("name", name);
		intent.putExtra("id", id + "");
		intent.putExtra("title", title);
		startActivity(intent);
	}

	// 获取数据
	private void GetData() {
		try {
			if (title.equals("收入账单")) {
				accounts = accountDBdao.findTotalIntoByName(name);
			} else if (title.equals("支出账单")) {
				accounts = accountDBdao.findTotalOutByName(name);
			} else if (title.equals("详细账单")) {
				accounts = accountDBdao.findAllByName(name);
			} else if (title.equals("今日账单")) {
				accounts = accountDBdao.findSomeTimeByName(name, time1);
			} else if (title.equals("本月账单")) {
				accounts = accountDBdao.findSomeTimeByName(name, time2);
			} else if (title.equals("本年账单")) {
				accounts = accountDBdao.findSomeTimeByName(name, time3);
			}
		} catch (Exception e) {
			Toast.makeText(this, "获取数据失败", 0).show();
			e.printStackTrace();
		}
	}

	// listview适配器
	private class MyAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return accounts.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub

			return accounts.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View view = inflater.inflate(R.layout.specific_data_data, null);
			Account account = accounts.get(position);
			TextView tv_text1 = (TextView) view
					.findViewById(R.id.ls_sp_tv_time);
			TextView tv_text2 = (TextView) view
					.findViewById(R.id.ls_sp_tv_type);
			TextView tv_text3 = (TextView) view
					.findViewById(R.id.ls_sp_tv_money);
			tv_text1.setText("时间 :" + account.getTime());
			tv_text2.setText("类型: " + account.getType());
			tv_text3.setText("金额:" + account.getMoney() + "");
			return view;
		}

	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		
		GetData();

		// 填充listview的数据
		cornerListView.setAdapter(new MyAdapter());
	}

}


package com.seventh.view;

import com.seventh.personalfinance.R;

import android.content.Context;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.AdapterView;
import android.widget.ListView;

public class CornerListView extends ListView {

	public CornerListView(Context context) {
		super(context);
	}

	public CornerListView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
	}

	public CornerListView(Context context, AttributeSet attrs) {
		super(context, attrs);
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		switch (ev.getAction()) {
		case MotionEvent.ACTION_DOWN:
			int x = (int) ev.getX();
			int y = (int) ev.getY();
			int itemnum = pointToPosition(x, y);

			if (itemnum == AdapterView.INVALID_POSITION)
				break;
			else {
				if (itemnum == 0) {
					if (itemnum == (getAdapter().getCount() - 1)) {
						// 只有一项
						setSelector(R.drawable.app_list_corner_round);
					} else {
						// 第一项
						setSelector(R.drawable.app_list_corner_round_top);
					}
				} else if (itemnum == (getAdapter().getCount() - 1))
					// 最后一项
					setSelector(R.drawable.app_list_corner_round_bottom);
				else {
					// 中间一项
					setSelector(R.drawable.app_list_corner_shape);
				}
			}

			break;
		case MotionEvent.ACTION_UP:
			break;
		}
		return super.onInterceptTouchEvent(ev);
	}

}


package com.seventh.view;

public class DataRange {
	private String text1;//时间范围
	private String text2;//收入
	private String text3;//支出

	public String getText1() {
		return text1;
	}

	public void setText1(String text1) {
		this.text1 = text1;
	}

	public String getText2() {
		return text2;
	}

	public void setText2(String text2) {
		this.text2 = text2;
	}

	public String getText3() {
		return text3;
	}

	public void setText3(String text3) {
		this.text3 = text3;
	}
}

package com.seventh.view;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import android.content.Context;

import com.seventh.db.AccountDBdao;

public class MainActivityService {

	/**
	 * 设置列表1数据
	 */
	public static List<Map<String, String>> getDataSource1(float totalInto,float totalOut) {
		List<Map<String, String>> map_list1 = new ArrayList<Map<String, String>>();

		Map<String, String> map = new HashMap<String, String>();

		String textRevenue = "￥" + totalInto;
		map.put("txtCalculationName", "收入总额:");
		map.put("txtMoney", textRevenue);
		map_list1.add(map);

		String textExpenditure = "￥" + totalOut;
		map = new HashMap<String, String>();
		map.put("txtCalculationName", "支出总额:");
		map.put("txtMoney", textExpenditure);
		map_list1.add(map);

		String textBalance = "￥" + (totalInto - totalOut);
		map = new HashMap<String, String>();
		map.put("txtCalculationName", "预算余额:");
		map.put("txtMoney", textBalance);
		map_list1.add(map);

		return map_list1;
	}

	/**
	 * 设置账单一览表数据
	 */
	public static List<DataRange> getDataSource2(String name,Context context) {
		AccountDBdao accountDBdao;
		accountDBdao = new AccountDBdao(context);
		List<DataRange> dataRanges = new ArrayList<DataRange>();
		DataRange dataRange = null;
		dataRange = new DataRange();

		Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00")); // 获取东八区时间
		int year = c.get(Calendar.YEAR); // 获取年
		int month = c.get(Calendar.MONTH) + 1; // 获取月份，0表示1月份
		int day = c.get(Calendar.DAY_OF_MONTH); // 获取当前天数
		String time1 = year + "/" + month + "/" + day;
		String time2 = year + "/" + month + "%";
		String time3 = year + "%";

		dataRange.setText1("今天账目一览表");
		accountDBdao.fillTodayInto(name, time1);
		dataRange.setText2("收入￥" + accountDBdao.fillTodayInto(name, time1));
		dataRange.setText3("支出 ￥" + accountDBdao.fillTodayOut(name, time1));
		dataRanges.add(dataRange);


		return dataRanges;
	}	
}


package com.seventh.view;

import org.achartengine.ChartFactory;
import org.achartengine.GraphicalView;
import org.achartengine.model.CategorySeries;
import org.achartengine.renderer.DefaultRenderer;
import org.achartengine.renderer.SimpleSeriesRenderer;

import android.content.Context;
import android.graphics.Color;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;

public class PieChart {
	/**
	 * 画饼状图
	 */
	public void paintingPieChart(Context context, LinearLayout piechar,int varlue1,int varlue2) {
		// 饼状图每个板块所占的比例
		double[] values = { varlue1, varlue2};
		// 饼状图每个板块的颜色
		int[] colors = { Color.GREEN, Color.RED};
		// 画饼状图
		GraphicalView mPieChartView;
		CategorySeries series = new CategorySeries("title");
		
		// 支出所占的比例为values[0]的值
		series.add("收入", values[0]);
		// 收入达标所占的比例为values[1]的值
		series.add("支出", values[1]);

		DefaultRenderer renderer = new DefaultRenderer();
		// 设置背景颜色
		renderer.setBackgroundColor(0);
		// 设置是否使用背景颜色
		renderer.setApplyBackgroundColor(true);
		// 设置 轴标签字体大小
		renderer.setLabelsTextSize(8);
		// 设置 轴标签字体颜色
		renderer.setLabelsColor(Color.BLACK);
		// 图例字体大小
		renderer.setLegendTextSize(8);
		// 图形 4边的边距
		renderer.setMargins(new int[] { 0, 20, 0, 0 }); 
		
		renderer.setChartTitleTextSize(10);//设置图表标题的文字大小
		renderer.setChartTitle("支出收入比例");//设置图表的标题  默认是居中顶部显示
		// 为饼状图赋予颜色
		for (int color : colors) {
			SimpleSeriesRenderer r = new SimpleSeriesRenderer();
			r.setColor(color);
			renderer.addSeriesRenderer(r);
		}

		// 集合饼状图各种属性于mPieChartView
		mPieChartView = ChartFactory.getPieChartView(context, series, renderer);
		//去除piechar中所有view
		piechar.removeAllViews();
		// 将mPieChartView加到piechar视图中
		
	}

}
